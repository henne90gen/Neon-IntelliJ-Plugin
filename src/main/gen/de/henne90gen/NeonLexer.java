/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.henne90gen;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import de.henne90gen.psi.NeonTypes;
import com.intellij.psi.TokenType;

/**
 * Lexer for the Neon language.
 */

class NeonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17472 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16"+
    "\1\17\1\20\1\21\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\25\1\26\1\27\2"+
    "\25\16\0\1\30\1\31\1\32\1\33\2\10\1\34\11\10\1\35\21\10\1\36\1\37\24\10\1"+
    "\7\3\10\1\22\1\40\1\7\4\10\1\41\1\42\4\0\1\43\1\44\1\25\3\10\2\45\1\25\1\46"+
    "\1\47\1\0\1\50\5\10\1\51\2\0\1\5\1\52\1\53\13\10\1\54\1\43\1\55\1\56\1\5\1"+
    "\57\1\25\1\60\1\61\3\10\3\0\1\62\12\10\1\63\1\0\1\64\1\25\1\5\1\65\3\10\1"+
    "\51\1\66\1\21\2\10\1\63\1\67\1\70\1\71\2\25\3\10\1\72\1\10\1\45\6\25\2\10"+
    "\1\30\1\73\2\25\1\74\5\0\1\75\6\10\1\76\2\0\1\77\1\10\1\100\1\5\1\7\1\10\1"+
    "\101\1\102\1\103\2\10\1\104\1\105\1\106\1\107\1\110\1\60\1\111\1\100\1\5\1"+
    "\112\1\113\1\114\1\115\1\103\2\10\1\104\1\116\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\5\1\125\1\25\1\114\1\35\1\34\2\10\1\104\1\126\1\106\1\43\1\127\1"+
    "\130\1\25\1\100\1\5\1\40\1\131\1\114\1\102\1\103\2\10\1\104\1\126\1\106\1"+
    "\107\1\121\1\132\1\111\1\100\1\5\1\40\1\25\1\133\1\134\1\135\1\136\1\113\1"+
    "\134\1\10\1\137\1\140\1\141\1\142\1\25\1\124\1\5\1\25\1\40\1\143\1\30\1\104"+
    "\2\10\1\104\1\10\1\144\1\145\1\141\1\146\1\45\1\100\1\5\2\25\1\101\1\30\1"+
    "\104\2\10\1\104\1\147\1\106\1\145\1\141\1\146\1\32\1\100\1\5\1\150\1\25\1"+
    "\143\1\30\1\104\4\10\1\151\1\145\1\152\1\153\1\41\1\100\1\5\1\25\1\37\1\154"+
    "\1\10\1\22\1\37\2\10\1\34\1\155\1\22\1\156\1\157\1\0\1\124\1\5\1\160\1\25"+
    "\1\7\5\10\1\161\1\162\1\163\1\164\1\5\1\165\4\25\1\166\1\167\1\170\1\7\1\171"+
    "\1\172\1\161\1\173\1\174\1\46\1\5\1\175\4\25\1\130\2\25\1\176\1\5\1\165\1"+
    "\177\1\200\1\10\1\7\3\10\1\26\1\42\1\0\1\145\1\201\1\0\1\42\3\0\1\202\1\203"+
    "\7\25\5\10\1\51\1\0\1\204\1\5\1\165\1\63\1\205\1\206\1\207\1\210\1\10\1\211"+
    "\1\212\1\5\1\213\4\10\1\35\1\20\5\10\1\214\51\10\1\135\1\22\1\135\5\10\1\135"+
    "\4\10\1\135\1\22\1\135\1\10\1\22\7\10\1\135\10\10\1\215\4\25\2\10\2\25\12"+
    "\10\2\73\1\7\114\10\1\102\2\10\1\7\2\10\1\45\11\10\1\134\1\10\1\130\1\10\1"+
    "\30\1\216\1\25\2\10\1\216\1\25\2\10\1\217\1\25\1\10\1\30\1\220\1\25\6\10\1"+
    "\221\3\0\1\222\1\223\1\5\1\165\3\25\1\224\1\5\1\165\13\10\1\25\1\225\4\10"+
    "\1\226\10\10\1\73\1\25\3\10\1\22\1\0\1\2\1\0\1\2\1\124\1\5\3\10\1\73\1\26"+
    "\1\25\5\10\1\112\3\10\1\24\1\5\1\165\4\25\2\10\1\163\1\2\6\10\1\201\1\164"+
    "\3\0\1\107\1\5\1\165\1\5\1\165\1\41\1\25\1\0\1\46\10\25\1\227\5\10\1\221\1"+
    "\0\1\227\1\112\1\5\1\165\1\25\1\230\1\2\1\25\1\231\3\10\1\77\1\207\1\5\1\65"+
    "\4\10\1\63\1\0\1\2\1\25\4\10\1\221\2\0\1\25\1\5\1\232\1\5\1\65\3\10\1\73\1"+
    "\10\1\130\10\25\1\233\2\0\1\234\1\235\1\176\30\10\7\0\1\236\42\10\2\73\4\10"+
    "\2\73\1\10\1\237\3\10\1\73\6\10\1\30\1\174\1\240\1\26\1\241\1\112\1\10\1\26"+
    "\1\240\1\26\1\25\1\230\3\25\1\242\1\25\1\41\1\130\1\25\1\243\1\25\1\145\1"+
    "\0\1\40\1\41\2\25\1\10\1\26\4\10\2\25\1\0\1\202\1\244\1\0\1\245\1\25\1\246"+
    "\1\37\1\155\1\247\1\27\1\250\1\10\1\251\1\252\1\253\2\25\5\10\1\130\116\25"+
    "\5\10\1\22\5\10\1\22\20\10\1\26\1\254\1\255\1\25\4\10\1\35\1\20\7\10\1\41"+
    "\1\25\1\60\2\10\1\22\1\25\10\22\4\0\5\25\1\41\72\25\1\252\3\25\1\7\1\211\1"+
    "\247\1\26\1\7\11\10\1\22\1\256\1\7\12\10\1\214\1\252\4\10\1\22\1\7\12\10\1"+
    "\22\2\25\3\10\1\45\6\25\170\10\1\73\11\25\75\10\1\45\2\25\21\10\1\26\10\25"+
    "\5\10\1\73\41\10\1\26\2\10\1\5\1\257\2\25\5\10\1\163\1\74\1\260\3\10\1\63"+
    "\12\10\1\176\3\25\1\41\1\10\1\37\14\10\1\103\3\10\1\22\1\10\7\25\1\41\1\10"+
    "\1\261\1\262\2\10\1\51\2\25\1\130\6\10\1\112\1\25\1\263\5\10\1\221\1\0\1\46"+
    "\1\25\1\5\1\165\2\0\1\263\1\264\1\5\1\65\2\10\1\63\1\46\2\10\1\163\1\0\1\2"+
    "\1\25\3\10\1\26\1\75\5\10\1\51\1\0\1\245\1\41\1\5\1\165\1\265\1\10\1\5\1\266"+
    "\5\10\1\77\1\164\1\25\1\262\1\267\1\5\1\165\2\10\1\22\1\270\6\10\1\206\1\271"+
    "\1\226\2\25\1\272\1\10\1\51\1\273\1\25\3\274\1\25\2\22\5\10\1\214\1\73\1\25"+
    "\16\10\1\51\1\275\1\5\1\165\64\10\1\112\1\25\2\10\1\22\1\276\5\10\1\112\40"+
    "\25\55\10\1\73\15\10\1\24\4\25\1\22\1\25\1\276\1\277\1\10\1\104\1\22\1\174"+
    "\1\300\15\10\1\24\3\25\1\276\54\10\1\73\2\25\10\10\1\37\6\10\5\25\1\10\1\26"+
    "\2\0\2\25\2\0\1\113\2\25\1\252\3\25\1\40\1\30\20\10\1\301\1\243\1\25\1\5\1"+
    "\165\1\7\2\10\1\115\1\7\2\10\1\45\1\302\12\10\1\22\3\37\1\303\1\304\2\25\1"+
    "\305\1\10\1\147\2\10\1\22\2\10\1\306\1\10\1\73\1\10\1\73\4\25\17\10\1\45\10"+
    "\25\6\10\1\26\20\25\1\307\20\25\3\10\1\26\6\10\1\130\1\25\1\245\3\25\4\10"+
    "\1\25\1\252\3\10\1\45\4\10\1\63\1\310\3\10\1\73\4\10\1\112\1\10\1\247\5\25"+
    "\23\10\1\73\1\5\1\165\4\10\1\112\4\10\1\112\5\10\1\25\6\10\1\112\23\25\46"+
    "\10\1\22\1\25\2\10\1\73\1\25\1\10\23\25\1\73\1\104\4\10\1\35\1\311\2\10\1"+
    "\73\1\25\2\10\1\22\1\25\3\10\1\22\10\25\2\10\1\312\1\25\2\10\1\73\1\25\3\10"+
    "\1\24\10\25\7\10\1\302\10\25\1\313\1\74\1\147\1\7\2\10\1\112\1\120\4\25\3"+
    "\10\1\26\3\10\1\26\4\25\1\10\1\7\2\10\1\314\3\25\6\10\1\73\1\25\2\10\1\73"+
    "\1\25\2\10\1\45\1\25\2\10\1\24\15\25\11\10\1\130\6\25\6\10\1\45\1\25\6\10"+
    "\1\45\41\25\1\231\6\10\1\0\1\164\3\25\1\124\1\5\1\25\1\60\1\231\5\10\1\0\1"+
    "\315\2\25\3\10\1\130\1\5\1\165\1\231\3\10\1\163\1\0\1\316\1\5\2\25\4\10\1"+
    "\317\1\25\1\231\5\10\1\51\1\0\1\320\1\321\1\5\1\322\4\25\2\10\1\34\2\10\1"+
    "\221\1\0\1\203\10\25\1\22\1\250\1\10\1\35\1\10\1\130\5\10\1\163\1\0\1\310"+
    "\1\5\1\165\1\143\1\102\1\103\2\10\1\104\1\126\1\106\1\107\1\121\1\142\1\252"+
    "\1\323\2\202\21\25\6\10\1\201\1\0\1\204\1\45\1\5\1\165\4\25\6\10\2\0\1\324"+
    "\1\25\1\5\1\165\24\25\5\10\1\163\1\46\1\0\1\245\2\25\1\267\4\25\6\10\2\0\1"+
    "\325\1\25\1\5\1\165\4\25\5\10\1\51\1\0\1\25\1\5\1\165\6\25\3\10\1\326\1\0"+
    "\1\2\1\5\1\165\54\25\10\10\1\5\1\165\1\25\1\41\40\25\1\77\1\231\4\10\1\51"+
    "\1\327\1\60\1\25\1\77\1\75\4\10\1\241\1\211\1\0\1\176\4\25\7\10\1\130\40\25"+
    "\1\10\1\104\3\10\1\163\1\164\1\0\1\130\1\25\1\5\1\165\2\25\1\37\3\10\1\330"+
    "\2\0\1\42\1\164\11\25\1\22\1\34\4\10\1\331\1\332\1\212\1\25\1\0\1\176\24\25"+
    "\63\10\1\24\14\25\15\10\1\22\2\25\30\10\1\112\27\25\5\10\1\22\72\25\10\10"+
    "\1\22\67\25\7\10\1\130\3\10\1\22\1\5\1\165\14\25\3\10\1\73\1\202\1\25\6\10"+
    "\1\164\1\25\1\112\1\25\1\5\1\165\1\276\2\10\1\252\2\10\56\25\10\10\1\26\1"+
    "\25\1\77\4\0\1\164\1\25\1\60\1\231\1\10\10\25\1\24\3\25\75\10\1\26\2\25\36"+
    "\10\1\45\41\25\43\10\1\22\12\25\61\10\1\112\40\25\15\10\1\45\1\10\1\26\1\10"+
    "\1\130\1\10\1\333\1\2\127\25\1\334\1\335\2\0\1\336\1\2\3\25\1\337\22\25\1"+
    "\321\67\25\12\10\1\30\10\10\1\30\1\340\1\341\1\10\1\342\1\147\7\10\1\35\1"+
    "\343\2\30\3\10\1\344\1\174\1\37\1\104\51\10\1\73\3\10\1\104\2\10\1\214\3\10"+
    "\1\214\2\10\1\30\3\10\1\30\2\10\1\22\3\10\1\22\3\10\1\104\3\10\1\104\2\10"+
    "\1\214\1\345\6\5\6\0\1\164\1\230\5\0\1\202\1\307\1\25\1\346\2\25\1\230\1\42"+
    "\1\0\52\25\1\164\2\0\1\347\1\350\1\310\72\25\30\10\1\26\1\25\1\164\5\25\10"+
    "\10\1\221\1\310\1\5\1\165\24\25\1\147\3\10\1\166\1\7\1\214\1\351\1\246\1\352"+
    "\1\166\1\237\1\166\2\214\1\123\1\10\1\34\1\10\1\112\1\353\1\34\1\10\1\112"+
    "\50\25\32\10\1\22\5\25\106\10\1\26\1\25\33\10\1\73\120\10\1\24\1\25\146\10"+
    "\1\130\3\25\3\10\1\73\74\25\1\122\3\25\14\0\20\25\36\0\2\25");

  /* The ZZ_CMAP_A table has 1888 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\3\1\2\1\0\1\3\1\1\6\6\4\0\1\3\1\51\1\11\1\4\1\5\3\0\1\34\1\35\1\44"+
    "\1\42\1\33\1\43\1\10\1\45\12\7\2\0\1\47\1\46\1\50\2\0\22\5\1\36\1\0\1\37\1"+
    "\0\1\5\1\0\1\21\1\22\1\5\1\32\1\23\1\12\1\26\1\5\1\15\2\5\1\17\1\30\1\14\1"+
    "\20\1\31\1\5\1\25\1\24\1\16\1\13\2\5\1\27\2\5\1\40\1\0\1\41\1\0\1\6\2\0\4"+
    "\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\7\5\1\0\2\5\4\0\4\5\16\0\5\5\7\0\1"+
    "\5\1\0\1\5\1\0\5\5\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5"+
    "\1\0\13\5\1\0\3\5\1\0\5\6\2\0\6\5\1\0\1\5\15\0\1\5\1\0\15\6\1\0\1\6\1\0\2"+
    "\6\1\0\2\6\1\0\1\6\3\5\5\0\6\6\5\0\1\5\4\0\3\6\1\0\1\6\3\0\3\5\5\6\2\7\4\0"+
    "\2\5\1\6\13\5\1\0\1\5\7\6\2\5\2\6\1\0\4\6\2\5\2\7\3\5\2\0\1\5\7\0\1\6\1\5"+
    "\1\6\6\5\3\6\2\0\11\5\3\6\1\5\6\0\2\7\6\5\4\6\2\5\2\0\2\6\1\5\11\6\1\5\3\6"+
    "\1\5\5\6\2\0\1\5\3\6\4\0\6\5\6\0\10\6\6\5\3\6\1\5\2\6\1\5\7\6\2\5\2\6\2\0"+
    "\2\7\1\5\3\6\1\0\10\5\2\0\2\5\2\0\6\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\1\5\5\0\2\5\1\0\5\5\7\0\2\5\4\0\3\6\1\0\6\5\4\0\2\5\1"+
    "\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5\1\0"+
    "\1\5\7\0\2\7\2\6\3\5\1\6\2\0\1\5\1\0\2\5\1\0\3\5\2\6\1\0\3\6\2\0\1\5\10\0"+
    "\1\5\6\6\6\0\2\6\2\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\4"+
    "\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\5\6\1\0\5\5\3\0\1\5\7\6\1\0\2\6\5\0"+
    "\2\6\1\0\4\5\1\0\3\5\1\0\2\5\5\0\3\5\2\6\1\5\3\6\1\0\4\6\1\5\5\0\3\5\1\6\2"+
    "\0\2\6\1\0\7\5\1\0\1\5\4\0\1\6\4\0\6\6\1\0\1\6\3\0\2\6\4\0\1\5\1\6\2\5\7\6"+
    "\4\0\10\5\10\6\1\0\2\7\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\3\5\2\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\2"+
    "\7\2\0\4\5\2\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\5\5\10\6\11\0\1\6\1\0\7\6"+
    "\1\5\2\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\5\5\14\6\1\5\1\6\2\7\4\6\2\0\3\5"+
    "\1\0\7\5\2\0\3\6\2\5\3\6\3\0\2\5\2\6\4\0\1\5\1\0\2\6\4\0\4\5\10\6\3\0\1\5"+
    "\3\0\2\5\1\6\5\0\4\6\1\0\5\5\2\6\2\5\1\6\1\5\5\0\5\6\3\5\3\0\10\6\5\5\2\7"+
    "\3\0\3\5\3\6\1\0\5\6\4\5\1\6\4\5\3\6\2\5\3\6\1\0\5\6\1\0\1\5\1\0\1\5\1\0\1"+
    "\5\1\0\1\5\2\0\3\5\1\0\6\5\2\0\2\5\2\0\5\6\5\0\1\5\4\0\1\6\3\0\4\6\11\0\1"+
    "\5\4\0\1\5\1\0\5\5\2\0\1\5\1\0\4\5\1\0\3\5\2\0\4\5\5\0\5\5\4\0\1\5\4\0\4\5"+
    "\3\6\2\5\5\0\2\6\2\0\3\5\2\7\2\5\4\0\6\6\1\0\3\5\1\6\3\5\1\6\4\5\1\6\4\5\2"+
    "\6\6\5\3\0\1\5\1\0\1\5\2\0\5\5\1\6\2\5\2\7\5\5\1\0\4\5\2\6\4\0\1\5\3\6\2\5"+
    "\1\6\5\5\2\6\3\0\3\5\4\0\3\5\2\6\2\0\6\5\1\0\3\6\1\0\2\6\5\0\5\5\5\0\1\5\1"+
    "\6\3\5\1\0\2\5\1\0\7\5\2\0\1\6\6\0\2\5\2\0\3\5\3\0\2\5\3\0\2\5\2\0\3\6\4\0"+
    "\3\5\1\0\2\5\1\0\1\5\5\0\1\6\2\0\3\6\5\0\1\5\3\0\1\5\2\0\4\5\1\0\2\5\2\0\1"+
    "\5\3\6\1\0\2\6\1\0\5\5\2\6\1\0\3\6\2\0\1\6\2\0\5\6\1\0\2\7\3\5\1\6\2\0\1\5"+
    "\1\0\1\6\4\5\5\0\3\6\3\0\2\7\1\5\1\0\1\5\3\0\2\5\2\6\2\0\6\6\2\5\1\0\1\5\1"+
    "\6\3\0\1\5\3\0\2\5\3\0\5\6\1\5\4\6\3\0\6\6\1\5\6\6\3\0\1\6\1\0\2\6\1\0\1\6"+
    "\2\5\3\0\2\6\6\0\5\6\3\0\6\6\2\0\3\6\2\0\4\6\4\0\1\5\2\0\2\5\2\0\4\5\1\0\4"+
    "\5\1\0\1\5\1\0\6\5\2\0\5\5\1\0\4\5\1\0\4\5\2\0\2\7\4\0\1\6\3\0\1\6\2\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\1\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\11\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\1"+
    "\2\4\2\0\1\25\4\5\1\26\3\5\1\27\5\5"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\5\1\36"+
    "\1\5\1\37\2\5\1\40\5\5\1\41\11\5\1\42"+
    "\1\5\1\43\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\124\0\124\0\250\0\322"+
    "\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\u02ca\0\u02f4"+
    "\0\u031e\0\u0348\0\u0372\0\124\0\u039c\0\u0126\0\124\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\322\0\u046e\0\u0498\0\u04c2\0\322"+
    "\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594\0\124\0\124\0\124"+
    "\0\124\0\u039c\0\322\0\u05be\0\322\0\u05e8\0\322\0\u0612"+
    "\0\u063c\0\322\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\322"+
    "\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e"+
    "\0\u0888\0\322\0\u08b2\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\3\1\12\1\13\2\10\1\14\1\15\1\10\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\5\10\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\52\3\54\0\1\5"+
    "\47\0\1\7\1\43\1\44\47\7\5\0\3\10\2\0"+
    "\21\10\26\0\1\11\1\45\46\0\3\46\1\0\1\47"+
    "\21\46\24\0\3\10\2\0\1\10\1\50\3\10\1\51"+
    "\1\52\1\53\11\10\24\0\3\10\2\0\1\54\1\10"+
    "\1\55\13\10\1\56\2\10\24\0\3\10\2\0\13\10"+
    "\1\57\5\10\24\0\3\10\2\0\13\10\1\60\5\10"+
    "\24\0\3\10\2\0\2\10\1\61\16\10\24\0\3\10"+
    "\2\0\6\10\1\62\12\10\24\0\3\10\2\0\15\10"+
    "\1\63\3\10\24\0\3\10\2\0\4\10\1\64\14\10"+
    "\24\0\3\10\2\0\11\10\1\65\7\10\65\0\1\66"+
    "\51\0\1\67\51\0\1\70\51\0\1\71\5\0\1\44"+
    "\56\0\1\72\47\0\3\10\2\0\2\10\1\73\16\10"+
    "\24\0\3\10\2\0\6\10\1\74\12\10\24\0\3\10"+
    "\2\0\13\10\1\75\5\10\24\0\3\10\2\0\5\10"+
    "\1\76\13\10\24\0\3\10\2\0\4\10\1\77\14\10"+
    "\24\0\3\10\2\0\17\10\1\100\1\10\24\0\3\10"+
    "\2\0\1\10\1\101\17\10\24\0\3\10\2\0\20\10"+
    "\1\102\24\0\3\10\2\0\6\10\1\103\12\10\24\0"+
    "\3\10\2\0\4\10\1\104\14\10\24\0\3\10\2\0"+
    "\13\10\1\105\5\10\24\0\3\10\2\0\4\10\1\106"+
    "\14\10\24\0\3\10\2\0\7\10\1\55\11\10\24\0"+
    "\3\10\2\0\12\10\1\101\6\10\24\0\3\10\2\0"+
    "\6\10\1\107\12\10\24\0\3\10\2\0\11\10\1\110"+
    "\7\10\24\0\3\10\2\0\5\10\1\111\13\10\24\0"+
    "\3\10\2\0\11\10\1\112\7\10\24\0\3\10\2\0"+
    "\3\10\1\113\15\10\24\0\3\10\2\0\1\10\1\114"+
    "\17\10\24\0\3\10\2\0\13\10\1\115\5\10\24\0"+
    "\3\10\2\0\11\10\1\116\7\10\24\0\3\10\2\0"+
    "\13\10\1\117\5\10\24\0\3\10\2\0\2\10\1\120"+
    "\16\10\24\0\3\10\2\0\13\10\1\121\5\10\24\0"+
    "\3\10\2\0\4\10\1\122\14\10\24\0\3\10\2\0"+
    "\7\10\1\123\11\10\24\0\3\10\2\0\2\10\1\124"+
    "\16\10\24\0\3\10\2\0\14\10\1\77\4\10\24\0"+
    "\3\10\2\0\2\10\1\125\16\10\24\0\3\10\2\0"+
    "\2\10\1\77\16\10\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2268];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\15\1\13\11\5\1\1\11"+
    "\2\0\1\11\16\1\4\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[85];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NeonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 37: break;
          case 2: 
            { return NeonTypes.NEW_LINE;
            } 
            // fall through
          case 38: break;
          case 3: 
            { /* ignore */
            } 
            // fall through
          case 39: break;
          case 4: 
            { return NeonTypes.COMMENT;
            } 
            // fall through
          case 40: break;
          case 5: 
            { return NeonTypes.IDENTIFIER;
            } 
            // fall through
          case 41: break;
          case 6: 
            { return NeonTypes.INTEGER;
            } 
            // fall through
          case 42: break;
          case 7: 
            { return NeonTypes.COMMA;
            } 
            // fall through
          case 43: break;
          case 8: 
            { return NeonTypes.LEFT_PARAN;
            } 
            // fall through
          case 44: break;
          case 9: 
            { return NeonTypes.RIGHT_PARAN;
            } 
            // fall through
          case 45: break;
          case 10: 
            { return NeonTypes.LEFT_BRACKET;
            } 
            // fall through
          case 46: break;
          case 11: 
            { return NeonTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 47: break;
          case 12: 
            { return NeonTypes.LEFT_CURLY_BRACE;
            } 
            // fall through
          case 48: break;
          case 13: 
            { return NeonTypes.RIGHT_CURLY_BRACE;
            } 
            // fall through
          case 49: break;
          case 14: 
            { return NeonTypes.PLUS;
            } 
            // fall through
          case 50: break;
          case 15: 
            { return NeonTypes.MINUS;
            } 
            // fall through
          case 51: break;
          case 16: 
            { return NeonTypes.STAR;
            } 
            // fall through
          case 52: break;
          case 17: 
            { return NeonTypes.DIV;
            } 
            // fall through
          case 53: break;
          case 18: 
            { return NeonTypes.SINGLE_EQUALS;
            } 
            // fall through
          case 54: break;
          case 19: 
            { return NeonTypes.LESS_THAN;
            } 
            // fall through
          case 55: break;
          case 20: 
            { return NeonTypes.GREATER_THAN;
            } 
            // fall through
          case 56: break;
          case 21: 
            { return NeonTypes.STRING;
            } 
            // fall through
          case 57: break;
          case 22: 
            { return NeonTypes.IF;
            } 
            // fall through
          case 58: break;
          case 23: 
            { return NeonTypes.OR;
            } 
            // fall through
          case 59: break;
          case 24: 
            { return NeonTypes.DOUBLE_EQUALS;
            } 
            // fall through
          case 60: break;
          case 25: 
            { return NeonTypes.LESS_EQUALS;
            } 
            // fall through
          case 61: break;
          case 26: 
            { return NeonTypes.GREATER_EQUALS;
            } 
            // fall through
          case 62: break;
          case 27: 
            { return NeonTypes.NOT_EQUALS;
            } 
            // fall through
          case 63: break;
          case 28: 
            { return NeonTypes.FLOAT;
            } 
            // fall through
          case 64: break;
          case 29: 
            { return NeonTypes.FUN;
            } 
            // fall through
          case 65: break;
          case 30: 
            { return NeonTypes.FOR;
            } 
            // fall through
          case 66: break;
          case 31: 
            { return NeonTypes.SIMPLE_DATA_TYPE;
            } 
            // fall through
          case 67: break;
          case 32: 
            { return NeonTypes.AND;
            } 
            // fall through
          case 68: break;
          case 33: 
            { return NeonTypes.BOOLEAN;
            } 
            // fall through
          case 69: break;
          case 34: 
            { return NeonTypes.IMPORT;
            } 
            // fall through
          case 70: break;
          case 35: 
            { return NeonTypes.EXTERN;
            } 
            // fall through
          case 71: break;
          case 36: 
            { return NeonTypes.RETURN;
            } 
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
