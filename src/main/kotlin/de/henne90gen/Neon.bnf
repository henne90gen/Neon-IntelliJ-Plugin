{
  parserClass="de.henne90gen.NeonParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Neon"
  psiImplClassSuffix="Impl"
  psiPackage="de.henne90gen.psi"
  psiImplPackage="de.henne90gen.psi.impl"

  elementTypeHolderClass="de.henne90gen.psi.NeonTypes"
  elementTypeClass="de.henne90gen.NeonElementType"
  tokenTypeClass="de.henne90gen.NeonTokenType"

  psiImplUtilClass="de.henne90gen.NeonPsiUtil"
}

neonFile ::= item_*

private item_ ::= (function | COMMENT | NEW_LINE)

data_type ::= (IDENTIFIER | SIMPLE_DATA_TYPE)

statement ::= (
    NEW_LINE |
    RETURN expression NEW_LINE |
    assignment NEW_LINE |
    variable_definition NEW_LINE |
    external_function NEW_LINE |
    if_statement |
    for_statement |
    import_statement NEW_LINE |
    assert_statement NEW_LINE
    )

assignment ::= assignment_left SINGLE_EQUALS expression
assignment_left ::= variable_definition | IDENTIFIER
if_statement ::= IF expression LEFT_CURLY_BRACE statement* RIGHT_CURLY_BRACE
for_statement ::= FOR assignment SEMICOLON expression SEMICOLON assignment LEFT_CURLY_BRACE statement* RIGHT_CURLY_BRACE
import_statement ::= IMPORT STRING
assert_statement ::= ASSERT expression

function_arguments ::= data_type IDENTIFIER (COMMA function_arguments)?
function ::= FUN IDENTIFIER
    LEFT_PARAN function_arguments?
    RIGHT_PARAN data_type?
    LEFT_CURLY_BRACE statement* RIGHT_CURLY_BRACE
external_function ::= EXTERN FUN IDENTIFIER
    LEFT_PARAN function_arguments? RIGHT_PARAN data_type?

variable_definition ::= data_type (LEFT_BRACKET INTEGER RIGHT_BRACKET)? IDENTIFIER {
    mixin="de.henne90gen.NeonNamedElementImpl"
    implements="de.henne90gen.NeonNamedElement"
    methods=[getName setName getNameIdentifier]
}
variable ::= IDENTIFIER (LEFT_BRACKET expression RIGHT_BRACKET)? {
    methods=[getName getReference]
}

expression ::= (LEFT_PARAN expression RIGHT_PARAN) |
    ((BOOLEAN | INTEGER | FLOAT | STRING | variable) (PLUS | MINUS | STAR | DIV | AND | OR | LESS_THAN | LESS_EQUALS | NOT_EQUALS | DOUBLE_EQUALS | GREATER_EQUALS | GREATER_THAN) expression) |
    (BOOLEAN | INTEGER | FLOAT | STRING | variable)
